syntax = "proto3";
package alexs778.cvproject.cvproject;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cvproject/params.proto";
import "cvproject/cv.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/AlexS778/CVProject/x/cvproject/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/AlexS778/CVProject/cvproject/params";
  }
	// Queries a list of CV items.
	rpc CVAll(QueryAllCVRequest) returns (QueryAllCVResponse) {
		option (google.api.http).get = "/AlexS778/CVProject/cvproject/cv";
	}

// Queries a list of GetCvByCosmosAddress items.
	rpc GetCvByCosmosAddress(QueryGetCvByCosmosAddressRequest) returns (QueryGetCvByCosmosAddressResponse) {
		option (google.api.http).get = "/AlexS778/CVProject/cvproject/get_cv_by_cosmos_address/{cosmosAddress}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryAllCVRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCVResponse {
	repeated CV cV = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCvByCosmosAddressRequest {
  string cosmosAddress = 1;
}

message QueryGetCvByCosmosAddressResponse {
	CV cV = 1;
}

// this line is used by starport scaffolding # 3
