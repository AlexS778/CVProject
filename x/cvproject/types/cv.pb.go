// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cvproject/cv.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CV struct {
	Index         uint64     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Name          string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Education     string     `protobuf:"bytes,3,opt,name=education,proto3" json:"education,omitempty"`
	Summary       string     `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Skills        string     `protobuf:"bytes,5,opt,name=skills,proto3" json:"skills,omitempty"`
	Experience    string     `protobuf:"bytes,6,opt,name=experience,proto3" json:"experience,omitempty"`
	CosmosAddress string     `protobuf:"bytes,7,opt,name=cosmos_address,json=cosmosAddress,proto3" json:"cosmos_address,omitempty"`
	Companies     []*Company `protobuf:"bytes,8,rep,name=Companies,proto3" json:"Companies,omitempty"`
}

func (m *CV) Reset()         { *m = CV{} }
func (m *CV) String() string { return proto.CompactTextString(m) }
func (*CV) ProtoMessage()    {}
func (*CV) Descriptor() ([]byte, []int) {
	return fileDescriptor_3612606c94a40498, []int{0}
}
func (m *CV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CV.Merge(m, src)
}
func (m *CV) XXX_Size() int {
	return m.Size()
}
func (m *CV) XXX_DiscardUnknown() {
	xxx_messageInfo_CV.DiscardUnknown(m)
}

var xxx_messageInfo_CV proto.InternalMessageInfo

func (m *CV) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CV) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CV) GetEducation() string {
	if m != nil {
		return m.Education
	}
	return ""
}

func (m *CV) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *CV) GetSkills() string {
	if m != nil {
		return m.Skills
	}
	return ""
}

func (m *CV) GetExperience() string {
	if m != nil {
		return m.Experience
	}
	return ""
}

func (m *CV) GetCosmosAddress() string {
	if m != nil {
		return m.CosmosAddress
	}
	return ""
}

func (m *CV) GetCompanies() []*Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

type Company struct {
	Uuid           string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TimestampStart string `protobuf:"bytes,3,opt,name=timestamp_start,json=timestampStart,proto3" json:"timestamp_start,omitempty"`
	TimestampEnd   string `protobuf:"bytes,4,opt,name=timestamp_end,json=timestampEnd,proto3" json:"timestamp_end,omitempty"`
	Comments       string `protobuf:"bytes,5,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (m *Company) Reset()         { *m = Company{} }
func (m *Company) String() string { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()    {}
func (*Company) Descriptor() ([]byte, []int) {
	return fileDescriptor_3612606c94a40498, []int{1}
}
func (m *Company) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Company) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Company.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Company) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Company.Merge(m, src)
}
func (m *Company) XXX_Size() int {
	return m.Size()
}
func (m *Company) XXX_DiscardUnknown() {
	xxx_messageInfo_Company.DiscardUnknown(m)
}

var xxx_messageInfo_Company proto.InternalMessageInfo

func (m *Company) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetTimestampStart() string {
	if m != nil {
		return m.TimestampStart
	}
	return ""
}

func (m *Company) GetTimestampEnd() string {
	if m != nil {
		return m.TimestampEnd
	}
	return ""
}

func (m *Company) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func init() {
	proto.RegisterType((*CV)(nil), "alexs778.cvproject.cvproject.CV")
	proto.RegisterType((*Company)(nil), "alexs778.cvproject.cvproject.Company")
}

func init() { proto.RegisterFile("cvproject/cv.proto", fileDescriptor_3612606c94a40498) }

var fileDescriptor_3612606c94a40498 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbf, 0xae, 0xd3, 0x30,
	0x18, 0xc5, 0x9b, 0xfe, 0x8f, 0xa1, 0x45, 0xb2, 0x10, 0xb2, 0x50, 0x15, 0x55, 0x45, 0x15, 0x9d,
	0x12, 0x09, 0x86, 0x74, 0x2d, 0x11, 0x03, 0x1b, 0x4a, 0xa5, 0x0e, 0x2c, 0x95, 0xeb, 0x7c, 0x02,
	0x43, 0x6c, 0x47, 0xb1, 0x53, 0xa5, 0xaf, 0xc0, 0xc4, 0xce, 0x0b, 0x31, 0x76, 0x64, 0x44, 0xed,
	0x8b, 0xa0, 0x3a, 0x69, 0x72, 0x87, 0xab, 0xbb, 0x7d, 0xe7, 0x77, 0x8e, 0x07, 0x1f, 0x1d, 0x84,
	0xd9, 0x31, 0xcb, 0xd5, 0x77, 0x60, 0x26, 0x60, 0x47, 0x3f, 0xcb, 0x95, 0x51, 0x78, 0x46, 0x53,
	0x28, 0x75, 0x18, 0xae, 0xfd, 0xc6, 0x6c, 0xaf, 0xc5, 0xcf, 0x2e, 0xea, 0x46, 0x3b, 0xfc, 0x12,
	0x0d, 0xb8, 0x4c, 0xa0, 0x24, 0xce, 0xdc, 0x59, 0xf5, 0xe3, 0x4a, 0x60, 0x8c, 0xfa, 0x92, 0x0a,
	0x20, 0xdd, 0xb9, 0xb3, 0x72, 0x63, 0x7b, 0xe3, 0x19, 0x72, 0x21, 0x29, 0x18, 0x35, 0x5c, 0x49,
	0xd2, 0xb3, 0x46, 0x0b, 0x30, 0x41, 0x23, 0x5d, 0x08, 0x41, 0xf3, 0x13, 0xe9, 0x5b, 0xef, 0x2e,
	0xf1, 0x2b, 0x34, 0xd4, 0x3f, 0x78, 0x9a, 0x6a, 0x32, 0xb0, 0x46, 0xad, 0xb0, 0x87, 0x10, 0x94,
	0x19, 0xe4, 0x1c, 0x24, 0x03, 0x32, 0xb4, 0xde, 0x03, 0x82, 0x97, 0x68, 0xca, 0x94, 0x16, 0x4a,
	0xef, 0x69, 0x92, 0xe4, 0xa0, 0x35, 0x19, 0xd9, 0xcc, 0xa4, 0xa2, 0x9b, 0x0a, 0xe2, 0x08, 0xb9,
	0x91, 0x12, 0x19, 0x95, 0x1c, 0x34, 0x19, 0xcf, 0x7b, 0xab, 0x67, 0xef, 0x96, 0xfe, 0x53, 0x3f,
	0xf7, 0xab, 0xf8, 0x29, 0x6e, 0xdf, 0x2d, 0x7e, 0x3b, 0x68, 0x54, 0xe3, 0xdb, 0xdf, 0x8b, 0x82,
	0x27, 0xb6, 0x10, 0x37, 0xb6, 0xf7, 0xa3, 0x7d, 0xbc, 0x45, 0x2f, 0x0c, 0x17, 0xa0, 0x0d, 0x15,
	0xd9, 0x5e, 0x1b, 0x9a, 0x9b, 0xba, 0x95, 0x69, 0x83, 0xb7, 0x37, 0x8a, 0xdf, 0xa0, 0x49, 0x1b,
	0x04, 0x99, 0xd4, 0x05, 0x3d, 0x6f, 0xe0, 0x47, 0x99, 0xe0, 0xd7, 0x68, 0xcc, 0x94, 0x10, 0x20,
	0xcd, 0xbd, 0xa7, 0x46, 0x7f, 0xf8, 0xf4, 0xe7, 0xe2, 0x39, 0xe7, 0x8b, 0xe7, 0xfc, 0xbb, 0x78,
	0xce, 0xaf, 0xab, 0xd7, 0x39, 0x5f, 0xbd, 0xce, 0xdf, 0xab, 0xd7, 0xf9, 0x12, 0x7c, 0xe5, 0xe6,
	0x5b, 0x71, 0xf0, 0x99, 0x12, 0xc1, 0x26, 0x85, 0x72, 0x1b, 0x86, 0xeb, 0x20, 0xda, 0x7d, 0xae,
	0xa7, 0x50, 0x06, 0xed, 0x2c, 0xcc, 0x29, 0x03, 0x7d, 0x18, 0xda, 0x69, 0xbc, 0xff, 0x1f, 0x00,
	0x00, 0xff, 0xff, 0xe2, 0xa1, 0x31, 0xae, 0x30, 0x02, 0x00, 0x00,
}

func (m *CV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Companies) > 0 {
		for iNdEx := len(m.Companies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Companies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CosmosAddress) > 0 {
		i -= len(m.CosmosAddress)
		copy(dAtA[i:], m.CosmosAddress)
		i = encodeVarintCv(dAtA, i, uint64(len(m.CosmosAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Experience) > 0 {
		i -= len(m.Experience)
		copy(dAtA[i:], m.Experience)
		i = encodeVarintCv(dAtA, i, uint64(len(m.Experience)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Skills) > 0 {
		i -= len(m.Skills)
		copy(dAtA[i:], m.Skills)
		i = encodeVarintCv(dAtA, i, uint64(len(m.Skills)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintCv(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Education) > 0 {
		i -= len(m.Education)
		copy(dAtA[i:], m.Education)
		i = encodeVarintCv(dAtA, i, uint64(len(m.Education)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCv(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintCv(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Company) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Company) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Company) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comments) > 0 {
		i -= len(m.Comments)
		copy(dAtA[i:], m.Comments)
		i = encodeVarintCv(dAtA, i, uint64(len(m.Comments)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TimestampEnd) > 0 {
		i -= len(m.TimestampEnd)
		copy(dAtA[i:], m.TimestampEnd)
		i = encodeVarintCv(dAtA, i, uint64(len(m.TimestampEnd)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TimestampStart) > 0 {
		i -= len(m.TimestampStart)
		copy(dAtA[i:], m.TimestampStart)
		i = encodeVarintCv(dAtA, i, uint64(len(m.TimestampStart)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCv(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCv(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCv(dAtA []byte, offset int, v uint64) int {
	offset -= sovCv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovCv(uint64(m.Index))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.Education)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.Skills)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.Experience)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.CosmosAddress)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	if len(m.Companies) > 0 {
		for _, e := range m.Companies {
			l = e.Size()
			n += 1 + l + sovCv(uint64(l))
		}
	}
	return n
}

func (m *Company) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.TimestampStart)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.TimestampEnd)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	l = len(m.Comments)
	if l > 0 {
		n += 1 + l + sovCv(uint64(l))
	}
	return n
}

func sovCv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCv(x uint64) (n int) {
	return sovCv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Education", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Education = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experience", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Experience = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Companies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Companies = append(m.Companies, &Company{})
			if err := m.Companies[len(m.Companies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Company) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Company: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Company: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimestampStart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampEnd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimestampEnd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCv = fmt.Errorf("proto: unexpected end of group")
)
