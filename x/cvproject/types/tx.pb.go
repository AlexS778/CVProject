// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cvproject/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCV struct {
	Creator    string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Education  string   `protobuf:"bytes,3,opt,name=education,proto3" json:"education,omitempty"`
	Summary    string   `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Skills     string   `protobuf:"bytes,5,opt,name=skills,proto3" json:"skills,omitempty"`
	Experience string   `protobuf:"bytes,6,opt,name=experience,proto3" json:"experience,omitempty"`
	Companies  []string `protobuf:"bytes,7,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (m *MsgCreateCV) Reset()         { *m = MsgCreateCV{} }
func (m *MsgCreateCV) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCV) ProtoMessage()    {}
func (*MsgCreateCV) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5056c0d43a94ec1, []int{0}
}
func (m *MsgCreateCV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCV.Merge(m, src)
}
func (m *MsgCreateCV) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCV) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCV.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCV proto.InternalMessageInfo

func (m *MsgCreateCV) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCV) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateCV) GetEducation() string {
	if m != nil {
		return m.Education
	}
	return ""
}

func (m *MsgCreateCV) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *MsgCreateCV) GetSkills() string {
	if m != nil {
		return m.Skills
	}
	return ""
}

func (m *MsgCreateCV) GetExperience() string {
	if m != nil {
		return m.Experience
	}
	return ""
}

func (m *MsgCreateCV) GetCompanies() []string {
	if m != nil {
		return m.Companies
	}
	return nil
}

type MsgCreateCVResponse struct {
	CvIndex uint64 `protobuf:"varint,1,opt,name=cvIndex,proto3" json:"cvIndex,omitempty"`
}

func (m *MsgCreateCVResponse) Reset()         { *m = MsgCreateCVResponse{} }
func (m *MsgCreateCVResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCVResponse) ProtoMessage()    {}
func (*MsgCreateCVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5056c0d43a94ec1, []int{1}
}
func (m *MsgCreateCVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCVResponse.Merge(m, src)
}
func (m *MsgCreateCVResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCVResponse proto.InternalMessageInfo

func (m *MsgCreateCVResponse) GetCvIndex() uint64 {
	if m != nil {
		return m.CvIndex
	}
	return 0
}

type MsgUpdateCV struct {
	Creator    string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Education  string   `protobuf:"bytes,3,opt,name=education,proto3" json:"education,omitempty"`
	Summary    string   `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Skills     string   `protobuf:"bytes,5,opt,name=skills,proto3" json:"skills,omitempty"`
	Experience string   `protobuf:"bytes,6,opt,name=experience,proto3" json:"experience,omitempty"`
	Companies  []string `protobuf:"bytes,7,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (m *MsgUpdateCV) Reset()         { *m = MsgUpdateCV{} }
func (m *MsgUpdateCV) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCV) ProtoMessage()    {}
func (*MsgUpdateCV) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5056c0d43a94ec1, []int{2}
}
func (m *MsgUpdateCV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCV.Merge(m, src)
}
func (m *MsgUpdateCV) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCV) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCV.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCV proto.InternalMessageInfo

func (m *MsgUpdateCV) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateCV) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateCV) GetEducation() string {
	if m != nil {
		return m.Education
	}
	return ""
}

func (m *MsgUpdateCV) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *MsgUpdateCV) GetSkills() string {
	if m != nil {
		return m.Skills
	}
	return ""
}

func (m *MsgUpdateCV) GetExperience() string {
	if m != nil {
		return m.Experience
	}
	return ""
}

func (m *MsgUpdateCV) GetCompanies() []string {
	if m != nil {
		return m.Companies
	}
	return nil
}

type MsgUpdateCVResponse struct {
}

func (m *MsgUpdateCVResponse) Reset()         { *m = MsgUpdateCVResponse{} }
func (m *MsgUpdateCVResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCVResponse) ProtoMessage()    {}
func (*MsgUpdateCVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5056c0d43a94ec1, []int{3}
}
func (m *MsgUpdateCVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCVResponse.Merge(m, src)
}
func (m *MsgUpdateCVResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCVResponse proto.InternalMessageInfo

type MsgConfirmCV struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CosmosAdress string `protobuf:"bytes,3,opt,name=cosmosAdress,proto3" json:"cosmosAdress,omitempty"`
}

func (m *MsgConfirmCV) Reset()         { *m = MsgConfirmCV{} }
func (m *MsgConfirmCV) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmCV) ProtoMessage()    {}
func (*MsgConfirmCV) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5056c0d43a94ec1, []int{4}
}
func (m *MsgConfirmCV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmCV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmCV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmCV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmCV.Merge(m, src)
}
func (m *MsgConfirmCV) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmCV) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmCV.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmCV proto.InternalMessageInfo

func (m *MsgConfirmCV) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgConfirmCV) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgConfirmCV) GetCosmosAdress() string {
	if m != nil {
		return m.CosmosAdress
	}
	return ""
}

type MsgConfirmCVResponse struct {
}

func (m *MsgConfirmCVResponse) Reset()         { *m = MsgConfirmCVResponse{} }
func (m *MsgConfirmCVResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmCVResponse) ProtoMessage()    {}
func (*MsgConfirmCVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5056c0d43a94ec1, []int{5}
}
func (m *MsgConfirmCVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmCVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmCVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmCVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmCVResponse.Merge(m, src)
}
func (m *MsgConfirmCVResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmCVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmCVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmCVResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateCV)(nil), "alexs778.cvproject.cvproject.MsgCreateCV")
	proto.RegisterType((*MsgCreateCVResponse)(nil), "alexs778.cvproject.cvproject.MsgCreateCVResponse")
	proto.RegisterType((*MsgUpdateCV)(nil), "alexs778.cvproject.cvproject.MsgUpdateCV")
	proto.RegisterType((*MsgUpdateCVResponse)(nil), "alexs778.cvproject.cvproject.MsgUpdateCVResponse")
	proto.RegisterType((*MsgConfirmCV)(nil), "alexs778.cvproject.cvproject.MsgConfirmCV")
	proto.RegisterType((*MsgConfirmCVResponse)(nil), "alexs778.cvproject.cvproject.MsgConfirmCVResponse")
}

func init() { proto.RegisterFile("cvproject/tx.proto", fileDescriptor_e5056c0d43a94ec1) }

var fileDescriptor_e5056c0d43a94ec1 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0xcf, 0xee, 0xd2, 0x40,
	0x10, 0xc7, 0xe9, 0x0f, 0xe4, 0xcf, 0xc8, 0x69, 0x55, 0xb2, 0x21, 0xa4, 0x21, 0x3d, 0xa9, 0x87,
	0x36, 0xe2, 0xa1, 0x5c, 0x91, 0x13, 0x07, 0x12, 0x83, 0x91, 0x83, 0x27, 0xcb, 0x76, 0x84, 0x4a,
	0xdb, 0x6d, 0x76, 0x0b, 0x29, 0x6f, 0xe1, 0x53, 0x19, 0xbd, 0x71, 0xf4, 0x68, 0xe0, 0x45, 0x4c,
	0x97, 0x6e, 0xa9, 0x1e, 0x04, 0x8f, 0xde, 0x76, 0xbe, 0x33, 0xbb, 0xdf, 0x7e, 0x66, 0x76, 0x0b,
	0x84, 0xed, 0x13, 0xc1, 0x3f, 0x23, 0x4b, 0x9d, 0x34, 0xb3, 0x13, 0xc1, 0x53, 0x4e, 0x06, 0x5e,
	0x88, 0x99, 0x74, 0xdd, 0xb1, 0x5d, 0x26, 0xaf, 0xab, 0x7e, 0x65, 0x07, 0xdb, 0x5f, 0x76, 0x58,
	0xdf, 0x0d, 0x78, 0x3c, 0x97, 0xeb, 0xa9, 0x40, 0x2f, 0xc5, 0xe9, 0x92, 0x50, 0x68, 0xb1, 0x7c,
	0xcd, 0x05, 0x35, 0x86, 0xc6, 0xf3, 0xce, 0x42, 0x87, 0x84, 0x40, 0x23, 0xf6, 0x22, 0xa4, 0x0f,
	0x4a, 0x56, 0x6b, 0x32, 0x80, 0x0e, 0xfa, 0x3b, 0xe6, 0xa5, 0x01, 0x8f, 0x69, 0x5d, 0x25, 0xae,
	0x42, 0x7e, 0x96, 0xdc, 0x45, 0x91, 0x27, 0x0e, 0xb4, 0x71, 0x39, 0xab, 0x08, 0x49, 0x0f, 0x9a,
	0x72, 0x1b, 0x84, 0xa1, 0xa4, 0x8f, 0x54, 0xa2, 0x88, 0x88, 0x09, 0x80, 0x59, 0x82, 0x22, 0xc0,
	0x98, 0x21, 0x6d, 0xaa, 0x5c, 0x45, 0xc9, 0xfd, 0x18, 0x8f, 0x12, 0x2f, 0x0e, 0x50, 0xd2, 0xd6,
	0xb0, 0x9e, 0xfb, 0x95, 0x82, 0xe5, 0xc0, 0x93, 0x0a, 0xca, 0x02, 0x65, 0xc2, 0x63, 0x89, 0x0a,
	0x69, 0x3f, 0x8b, 0x7d, 0xcc, 0x14, 0x52, 0x63, 0xa1, 0x43, 0x0d, 0xff, 0x3e, 0xf1, 0xff, 0x7f,
	0xf8, 0x67, 0x0a, 0x5e, 0xa3, 0x68, 0x78, 0xeb, 0x23, 0x74, 0xf3, 0x9e, 0xf0, 0xf8, 0x53, 0x20,
	0xa2, 0x7f, 0x46, 0xb4, 0xa0, 0xcb, 0xb8, 0x8c, 0xb8, 0x9c, 0xf8, 0x02, 0xa5, 0x2c, 0x28, 0x7f,
	0xd3, 0xac, 0x1e, 0x3c, 0xad, 0x3a, 0x68, 0xe7, 0xd1, 0xd7, 0x07, 0xa8, 0xcf, 0xe5, 0x9a, 0x6c,
	0xa0, 0x5d, 0xde, 0xae, 0x17, 0xf6, 0xdf, 0x2e, 0xa8, 0x5d, 0x99, 0x5e, 0xff, 0xd5, 0xdd, 0xa5,
	0xe5, 0xa0, 0x37, 0xd0, 0x2e, 0x47, 0x79, 0xdb, 0x49, 0x97, 0xde, 0xe1, 0xf4, 0x67, 0x57, 0xc9,
	0x16, 0x3a, 0xd7, 0x96, 0xbe, 0xbc, 0xfd, 0xa5, 0xba, 0xb6, 0x3f, 0xba, 0xbf, 0x56, 0x9b, 0xbd,
	0x99, 0x7d, 0x3b, 0x99, 0xc6, 0xf1, 0x64, 0x1a, 0x3f, 0x4f, 0xa6, 0xf1, 0xe5, 0x6c, 0xd6, 0x8e,
	0x67, 0xb3, 0xf6, 0xe3, 0x6c, 0xd6, 0x3e, 0x38, 0xeb, 0x20, 0xdd, 0xec, 0x56, 0x36, 0xe3, 0x91,
	0x33, 0x09, 0x31, 0x7b, 0xe7, 0xba, 0x63, 0x67, 0xba, 0x7c, 0x5b, 0x3c, 0xf2, 0xcc, 0xa9, 0xfc,
	0x22, 0x0e, 0x09, 0xca, 0x55, 0x53, 0x3d, 0xfa, 0xd7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2a,
	0x67, 0x0c, 0x23, 0x3c, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateCV(ctx context.Context, in *MsgCreateCV, opts ...grpc.CallOption) (*MsgCreateCVResponse, error)
	UpdateCV(ctx context.Context, in *MsgUpdateCV, opts ...grpc.CallOption) (*MsgUpdateCVResponse, error)
	ConfirmCV(ctx context.Context, in *MsgConfirmCV, opts ...grpc.CallOption) (*MsgConfirmCVResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCV(ctx context.Context, in *MsgCreateCV, opts ...grpc.CallOption) (*MsgCreateCVResponse, error) {
	out := new(MsgCreateCVResponse)
	err := c.cc.Invoke(ctx, "/alexs778.cvproject.cvproject.Msg/CreateCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCV(ctx context.Context, in *MsgUpdateCV, opts ...grpc.CallOption) (*MsgUpdateCVResponse, error) {
	out := new(MsgUpdateCVResponse)
	err := c.cc.Invoke(ctx, "/alexs778.cvproject.cvproject.Msg/UpdateCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmCV(ctx context.Context, in *MsgConfirmCV, opts ...grpc.CallOption) (*MsgConfirmCVResponse, error) {
	out := new(MsgConfirmCVResponse)
	err := c.cc.Invoke(ctx, "/alexs778.cvproject.cvproject.Msg/ConfirmCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateCV(context.Context, *MsgCreateCV) (*MsgCreateCVResponse, error)
	UpdateCV(context.Context, *MsgUpdateCV) (*MsgUpdateCVResponse, error)
	ConfirmCV(context.Context, *MsgConfirmCV) (*MsgConfirmCVResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCV(ctx context.Context, req *MsgCreateCV) (*MsgCreateCVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCV not implemented")
}
func (*UnimplementedMsgServer) UpdateCV(ctx context.Context, req *MsgUpdateCV) (*MsgUpdateCVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCV not implemented")
}
func (*UnimplementedMsgServer) ConfirmCV(ctx context.Context, req *MsgConfirmCV) (*MsgConfirmCVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCV not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alexs778.cvproject.cvproject.Msg/CreateCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCV(ctx, req.(*MsgCreateCV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alexs778.cvproject.cvproject.Msg/UpdateCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCV(ctx, req.(*MsgUpdateCV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmCV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alexs778.cvproject.cvproject.Msg/ConfirmCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmCV(ctx, req.(*MsgConfirmCV))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alexs778.cvproject.cvproject.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCV",
			Handler:    _Msg_CreateCV_Handler,
		},
		{
			MethodName: "UpdateCV",
			Handler:    _Msg_UpdateCV_Handler,
		},
		{
			MethodName: "ConfirmCV",
			Handler:    _Msg_ConfirmCV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cvproject/tx.proto",
}

func (m *MsgCreateCV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Companies) > 0 {
		for iNdEx := len(m.Companies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Companies[iNdEx])
			copy(dAtA[i:], m.Companies[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Companies[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Experience) > 0 {
		i -= len(m.Experience)
		copy(dAtA[i:], m.Experience)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Experience)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Skills) > 0 {
		i -= len(m.Skills)
		copy(dAtA[i:], m.Skills)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Skills)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Education) > 0 {
		i -= len(m.Education)
		copy(dAtA[i:], m.Education)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Education)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCVResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCVResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CvIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CvIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Companies) > 0 {
		for iNdEx := len(m.Companies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Companies[iNdEx])
			copy(dAtA[i:], m.Companies[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Companies[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Experience) > 0 {
		i -= len(m.Experience)
		copy(dAtA[i:], m.Experience)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Experience)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Skills) > 0 {
		i -= len(m.Skills)
		copy(dAtA[i:], m.Skills)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Skills)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Education) > 0 {
		i -= len(m.Education)
		copy(dAtA[i:], m.Education)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Education)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCVResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCVResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmCV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmCV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmCV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CosmosAdress) > 0 {
		i -= len(m.CosmosAdress)
		copy(dAtA[i:], m.CosmosAdress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosAdress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmCVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmCVResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmCVResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Education)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Skills)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Experience)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Companies) > 0 {
		for _, s := range m.Companies {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateCVResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CvIndex != 0 {
		n += 1 + sovTx(uint64(m.CvIndex))
	}
	return n
}

func (m *MsgUpdateCV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Education)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Skills)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Experience)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Companies) > 0 {
		for _, s := range m.Companies {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateCVResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmCV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CosmosAdress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmCVResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Education", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Education = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experience", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Experience = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Companies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Companies = append(m.Companies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvIndex", wireType)
			}
			m.CvIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CvIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Education", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Education = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experience", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Experience = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Companies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Companies = append(m.Companies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmCV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmCV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmCV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAdress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAdress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmCVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmCVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmCVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
